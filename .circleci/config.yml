version: 2.1

orbs:
  orb-tools: circleci/orb-tools@2.0.0

jobs:
  validate:
    resource_class: small
    docker:
      - image: cimg/node:lts
    steps:
      - test-project:
          project: drupal-project-k8s
      - test-project:
          project: frontend-project-k8s
      - test-project:
          project: simple-project-k8s

commands:
  test-project:
    parameters:
      org:
        type: string
        default: wunderio
      project:
        type: string
      branch:
        type: string
        default: master
    steps:
      - run:
          name: Validate orb with <<parameters.project>>
          command: |

            REPO_NAME="<<parameters.project>>"
            ORG_NAME="<<parameters.org>>"
            BRANCH_NAME="<<parameters.branch>>"
            CIRCLECI_DEV_API_TOKEN_B64=$(echo -n "${CIRCLECI_DEV_API_TOKEN}:" | base64)

            if [ -z "${CIRCLECI_DEV_API_TOKEN}" ]; then
              echo "Repository secrets is missing CIRCLECI_DEV_API_TOKEN variable."
              exit 1
            fi

            echo "Running ${ORG_NAME}/${REPO_NAME}/${BRANCH_NAME} build on CircleCI"
            echo "Project link: https://app.circleci.com/pipelines/github/${ORG_NAME}/${REPO_NAME}?branch=${BRANCH_NAME}"

            # Trigger a new pipeline
            PIPELINE_ID=$(curl --request POST \
              --url "https://circleci.com/api/v2/project/gh/wunderio/${REPO_NAME}/pipeline" \
              --header "content-type: application/json" \
              --data "{\"branch\":\"${BRANCH_NAME}\"}" \
              --header "authorization: Basic ${CIRCLECI_DEV_API_TOKEN_B64}" --silent | jq -r '.id')

            echo "Pipeline ID: ${PIPELINE_ID}"

            sleep 10

            # Wait for pipeline to complete
            while true; do
              PIPELINE_STATUS=$(curl --request GET \
                --url "https://circleci.com/api/v2/pipeline/${PIPELINE_ID}/workflow" \
                --header "authorization: Basic ${CIRCLECI_DEV_API_TOKEN_B64}" --silent | jq -r '.items[0].status')
              if [ "${PIPELINE_STATUS}" = "success" ]; then
                echo "Pipeline completed successfully"
                break
              elif [ "${PIPELINE_STATUS}" != "created" ] && [ "${PIPELINE_STATUS}" != "running" ]; then
                echo "Pipeline status: ${PIPELINE_STATUS}, failing the test"
                exit 1
              fi
              echo "current status: ${PIPELINE_STATUS}"
              sleep 10
            done

workflows:
  btd:
    jobs:
      - orb-tools/publish:  &publish
          pre-steps:
            - checkout
            - run:
                name: Pack the orb
                command: circleci config pack orb/ > orb.yml

          name: "Publish development orb"
          orb-path: orb.yml
          orb-ref: silta/silta@dev:${CIRCLE_BRANCH}
          publish-token-variable: "$CIRCLECI_DEV_API_TOKEN"
          validate: true

      - orb-tools/publish:
          <<: *publish
          name: "Publish production orb"
          orb-ref: silta/silta@${CIRCLE_TAG}
          filters:
            tags:
              only: /\d+\.\d+\.\d+/
            branches:
              ignore: /.*/

      - validate: &validate
          requires:
            - "Publish development orb"
          # filters:
          #   branches:
          #     only: master

  weekly-dev-publish:
    triggers:
      - schedule:
          cron: "0 8 * * 1"
          filters:
            branches:
              only:
                - master
    jobs:
      - orb-tools/publish: *publish
      - validate: *validate
