phpcs:
  description: "phpcs validation command."
  steps:
    - run:
        name: phpcs validation
        command: |
          if [ -f phpcs.xml ] && [ -f vendor/bin/phpcs ]; then
            vendor/bin/phpcs --standard=phpcs.xml -s --colors
          fi

grumphp:
  description: "grumphp validation command."
  steps:
    - run:
        name: grumphp validation
        command: |
          if [ -f grumphp.yml ] && [ -f vendor/bin/grumphp ]; then
            vendor/bin/grumphp run
          fi

drupal-composer-install:
  description: "PHP composer install command."
  parameters:
    install-dev-dependencies:
      description: "Install development packages."
      type: boolean
      default: false
    cache-version:
      description: "CircleCI cache key prefix."
      type: string
      default: "v2"
  steps:
    - when:
        # Install dev dependencies.
        condition: <<parameters.install-dev-dependencies>>
        steps:
          # Restore from cache entries with or without dev dependencies.
          - restore_cache:
              keys:
                - <<parameters.cache-version>>-dependencies-{{ checksum "composer.lock" }}-<<parameters.install-dev-dependencies>>
                - <<parameters.cache-version>>-dependencies-{{ checksum "composer.lock" }}
          - run:
              name: composer install
              command: |
                composer install -n --prefer-dist --ignore-platform-reqs --optimize-autoloader

    - unless:
        # Don't install dev dependencies.
        condition: <<parameters.install-dev-dependencies>>
        steps:
          # Only restore from cache entries without dev dependencies.
          - restore_cache:
              keys:
                - <<parameters.cache-version>>-dependencies-{{ checksum "composer.lock" }}-<<parameters.install-dev-dependencies>>
          - run:
              name: composer install
              command: |
                composer install -n --prefer-dist --ignore-platform-reqs --no-dev --optimize-autoloader

    - save_cache:
        paths:
          - ./vendor
          - ./web/core
          - ./web/modules/contrib
          - ./web/themes/contrib
          - ./web/profiles/contrib
          - ./web/libraries
          - ./web/_ping.php
        key: <<parameters.cache-version>>-dependencies-{{ checksum "composer.lock" }}-<<parameters.install-dev-dependencies>>

drupal-docker-build:
  description: "Build docker images for drupal chart."
  parameters:
    nginx_build_context:
      type: string
      default: "web"
      description: "Path to be used as build context for Nginx image."
  steps:
    - build-docker-image:
        dockerfile: silta/nginx.Dockerfile
        path: <<parameters.nginx_build_context>>
        identifier: nginx
        docker-hash-prefix: v5

    - build-docker-image:
        dockerfile: silta/php.Dockerfile
        path: "."
        identifier: php
        docker-hash-prefix: v5

    - build-docker-image:
        dockerfile: silta/shell.Dockerfile
        path: "."
        identifier: shell
        docker-hash-prefix: v6

drupal-helm-deploy:
  description: "Deploy helm release."
  parameters:
    chart_name:
      description: "Helm chart name."
      type: string
    chart_repository:
      description: "Helm chart repository."
      type: string
    chart_version:
      description: "Deploy specific drupal helm chart version."
      type: string
      default: ""
    silta_config:
      description: "Chart values override file. Can have multiple, comma separated values."
      type: string
    cluster_domain:
      description: "Cluster domain value for helm chart. Will be used for default ingress hostnames."
      type: env_var_name
      default: CLUSTER_DOMAIN
    deployment_timeout:
      type: string
      default: "15m"
  steps:
    - helm-cleanup
    - run:
        name: Special updates
        command: |
          function version_lt() { test "$(printf '%s\n' "$@" | sort -rV | head -n 1)" != "$1"; }

          if [[ -n "$CURRENT_CHART_VERSION" ]] && [[ "$CURRENT_CHART_VERSION" = drupal-* ]]
          then
            if version_lt "$CURRENT_CHART_VERSION" "drupal-0.3.43"
            then
              echo "Recreating statefulset for Mariadb subchart update to 7.x."
              kubectl delete statefulset --cascade=false "$RELEASE_NAME-mariadb" -n "$NAMESPACE"
            fi
          fi

    - run:
        name: Deploy helm release
        no_output_timeout: '<<parameters.deployment_timeout>>'
        command: |
          NAMESPACE="${CIRCLE_PROJECT_REPONAME,,}"
          BRANCHNAME="${CIRCLE_BRANCH,,}"
          REPOSITORY_URL="${CIRCLE_REPOSITORY_URL}"

          PHP_IMAGE_URL=${php_IMAGE_URL}
          NGINX_IMAGE_URL=${nginx_IMAGE_URL}
          SHELL_IMAGE_URL=${shell_IMAGE_URL}

          silta ci release deploy \
            --release-name "${RELEASE_NAME}" \
            --chart-name "<<parameters.chart_name>>" \
            --chart-version "<<parameters.chart_version>>" \
            --chart-repository "<<parameters.chart_repository>>" \
            --branchname "${BRANCHNAME}" \
            --silta-environment-name "${SILTA_ENVIRONMENT_NAME}" \
            --nginx-image-url "${NGINX_IMAGE_URL}" \
            --php-image-url "${PHP_IMAGE_URL}" \
            --shell-image-url "${SHELL_IMAGE_URL}" \
            --repository-url "${REPOSITORY_URL}" \
            --gitauth-username "${GITAUTH_USERNAME}" \
            --gitauth-password "${GITAUTH_PASSWORD}" \
            --cluster-domain "${<<parameters.cluster_domain>>}" \
            --vpn-ip "${VPN_IP}" \
            --vpc-native "${VPC_NATIVE}" \
            --cluster-type "${CLUSTER_TYPE}" \
            --db-root-pass "${DB_ROOT_PASS}" \
            --db-user-pass "${DB_USER_PASS}" \
            --namespace "${NAMESPACE}" \
            --silta-config "<<parameters.silta_config>>" \
            --deployment-timeout "<<parameters.deployment_timeout>>"

    - run:
        name: Wait for resources to be ready
        command: |
          # Get all deployments and statefulsets in the release and check the status of each one.
          statefulsets=$(kubectl get statefulset -n "$NAMESPACE" -l "release=${RELEASE_NAME}" -o name)
          if [ ! -z "$statefulsets" ]; then
            echo "$statefulsets" | xargs -n 1 kubectl rollout status -n "$NAMESPACE"
          fi
          kubectl get deployment -n "$NAMESPACE" -l "release=${RELEASE_NAME}" -o name | xargs -n 1 kubectl rollout status -n "$NAMESPACE"

    - helm-release-information

drupal-values-validate:
  description: "Validate helm release."
  parameters:
    chart_name:
      description: "Helm chart name."
      type: string
    chart_repository:
      description: "Helm chart repository."
      type: string
    chart_version:
      description: "Validate specific drupal helm chart version."
      type: string
      default: ""
    silta_config:
      description: "Chart values override file. Can have multiple, comma separated values."
      type: string
  steps:
    - run:
        name: Validate values file
        command: |
          if [[ ! -z "<<parameters.chart_version>>" ]] ; then
            version="--version <<parameters.chart_version>>"
          fi

          helm upgrade --dry-run --debug --install "$RELEASE_NAME" '<<parameters.chart_name>>' \
            --repo '<<parameters.chart_repository>>' \
            $version \
            --set environmentName="$SILTA_ENVIRONMENT_NAME" \
            --set silta-release.branchName="$CIRCLE_BRANCH" \
            --set php.image="test:test" \
            --set nginx.image="test:test" \
            --set shell.image="test:test" \
            --namespace="$NAMESPACE" \
            --values '<<parameters.silta_config>>' \
