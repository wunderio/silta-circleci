phpcs:
  description: "phpcs validation command."
  steps:
    - run:
        name: phpcs validation
        command: |
          if [ -f phpcs.xml ] && [ -f vendor/bin/phpcs ]; then
            vendor/bin/phpcs --standard=phpcs.xml -s --colors
          fi

grumphp:
  description: "grumphp validation command."
  steps:
    - run:
        name: grumphp validation
        command: |
          if [ -f grumphp.yml ] && [ -f vendor/bin/grumphp ]; then
            vendor/bin/grumphp run
          fi

drupal-composer-install:
  description: "PHP composer install command."
  parameters:
    install-dev-dependencies:
      description: "Install development packages."
      type: boolean
      default: false
    cache-version:
      description: "CircleCI cache key prefix."
      type: string
      default: "v2"
  steps:
    - when:
        # Install dev dependencies.
        condition: <<parameters.install-dev-dependencies>>
        steps:
          # Restore from cache entries with or without dev dependencies.
          - restore_cache:
              keys:
                - <<parameters.cache-version>>-dependencies-{{ checksum "composer.lock" }}-<<parameters.install-dev-dependencies>>
                - <<parameters.cache-version>>-dependencies-{{ checksum "composer.lock" }}
          - run:
              name: composer install
              command: |
                composer install -n --prefer-dist --ignore-platform-reqs --optimize-autoloader

    - unless:
        # Don't install dev dependencies.
        condition: <<parameters.install-dev-dependencies>>
        steps:
          # Only restore from cache entries without dev dependencies.
          - restore_cache:
              keys:
                - <<parameters.cache-version>>-dependencies-{{ checksum "composer.lock" }}-<<parameters.install-dev-dependencies>>
          - run:
              name: composer install
              command: |
                composer install -n --prefer-dist --ignore-platform-reqs --no-dev --optimize-autoloader

    - save_cache:
        paths:
          - ./vendor
          - ./web/core
          - ./web/modules/contrib
          - ./web/themes/contrib
          - ./web/profiles/contrib
          - ./web/libraries
          - ./web/_ping.php
        key: <<parameters.cache-version>>-dependencies-{{ checksum "composer.lock" }}-<<parameters.install-dev-dependencies>>

drupal-docker-build:
  description: "Build docker images for drupal chart."
  parameters:
    nginx_build_context:
      type: string
      default: "web"
      description: "Path to be used as build context for Nginx image."
  steps:
    - build-docker-image:
        dockerfile: silta/nginx.Dockerfile
        path: <<parameters.nginx_build_context>>
        identifier: nginx
        docker-hash-prefix: v5

    - build-docker-image:
        dockerfile: silta/php.Dockerfile
        path: "."
        identifier: php
        docker-hash-prefix: v5

    - build-docker-image:
        dockerfile: silta/shell.Dockerfile
        path: "."
        identifier: shell
        docker-hash-prefix: v6

drupal-helm-deploy:
  description: "Deploy helm release."
  parameters:
    chart_name:
      description: "Helm chart name."
      type: string
    chart_repository:
      description: "Helm chart repository."
      type: string
    chart_version:
      description: "Deploy specific drupal helm chart version."
      type: string
      default: ""
    silta_config:
      description: "Chart values override file. Can have multiple, comma separated values."
      type: string
    cluster_domain:
      description: "Cluster domain value for helm chart. Will be used for default ingress hostnames."
      type: env_var_name
      default: CLUSTER_DOMAIN
    deployment_timeout:
      type: string
      default: "15m"
  steps:
    - helm-cleanup
    - run:
        name: Special updates
        command: |
          function version_lt() { test "$(printf '%s\n' "$@" | sort -rV | head -n 1)" != "$1"; }

          if [[ -n "$CURRENT_CHART_VERSION" ]] && [[ "$CURRENT_CHART_VERSION" = drupal-* ]]
          then
            if version_lt "$CURRENT_CHART_VERSION" "drupal-0.3.43"
            then
              echo "Recreating statefulset for Mariadb subchart update to 7.x."
              kubectl delete statefulset --cascade=false "$RELEASE_NAME-mariadb" -n "$NAMESPACE"
            fi
          fi

    - run:
        name: Deploy helm release
        no_output_timeout: '<<parameters.deployment_timeout>>'
        command: |
          #Detect pods in FAILED state
          function show_failing_pods() {
            failed_pods=$(kubectl get pod -l "release=$RELEASE_NAME,cronjob!=true" -n "$NAMESPACE" --no-headers | grep -Ev '([0-9]+)/\1' | grep -Eo '^[^ ]+')
            if [[ ! -z "$failed_pods" ]] ; then
              echo "Failing pods:"
              echo "$failed_pods"
              echo ""
              echo "Please check logs for the pods above"
              true
            fi
            false
          }
          
          # Delete existing jobs to prevent getting wrong log output
          kubectl delete job "$RELEASE_NAME-post-release" -n "$NAMESPACE" --ignore-not-found > /dev/null

          # Disable reference data if the required volume is not present.
          reference_volume=$(kubectl get pv | grep --extended-regexp "$NAMESPACE/.*-reference-data") || true
          reference_data_override=''
          if [[ -z "$reference_volume" ]] ; then
            reference_data_override='--set referenceData.skipMount=true'
          fi

          # Override Database credentials if specified
          if [[ ! -z "$DB_ROOT_PASS" ]] ; then
            db_root_pass_override="--set mariadb.rootUser.password=$DB_ROOT_PASS"
          fi
          if [[ ! -z "$DB_USER_PASS" ]] ; then
            db_user_pass_override="--set mariadb.db.password=$DB_USER_PASS"
          fi

          # Add internal VPN if defined in environment
          extra_noauthips=""
          if [[ ! -z "$VPN_IP" ]] ; then
            extra_noauthips="--set nginx.noauthips.vpn=${VPN_IP}/32"
          fi
          
          # Pass VPC native setting if defined in environment
          extra_vpcnative=""
          if [[ ! -z "$VPC_NATIVE" ]] ; then
            extra_vpcnative="--set cluster.vpcNative=${VPC_NATIVE}"
          fi

          # Add cluster type if defined in environment
          extra_clustertype=""
          if [[ ! -z "$CLUSTER_TYPE" ]] ; then
            extra_clustertype="--set cluster.type=${CLUSTER_TYPE}"
          fi

          if [[ ! -z "<<parameters.chart_version>>" ]] ; then
            version="--version <<parameters.chart_version>>"
          fi

          helm upgrade --install "$RELEASE_NAME" '<<parameters.chart_name>>' \
            --repo '<<parameters.chart_repository>>' \
            $version \
            --cleanup-on-fail \
            --set environmentName="$SILTA_ENVIRONMENT_NAME" \
            --set silta-release.branchName="$CIRCLE_BRANCH" \
            --set php.image="$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$NAMESPACE-php:$php_HASH" \
            --set nginx.image="$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$NAMESPACE-nginx:$nginx_HASH" \
            --set shell.image="$DOCKER_REPO_HOST/$DOCKER_REPO_PROJ/$NAMESPACE-shell:$shell_HASH" \
            $extra_noauthips \
            $extra_vpcnative \
            $extra_clustertype \
            $db_root_pass_override \
            $db_user_pass_override \
            --set shell.gitAuth.repositoryUrl="$CIRCLE_REPOSITORY_URL" \
            --set shell.gitAuth.apiToken="$GITAUTH_API_TOKEN" \
            --set shell.gitAuth.keyserver.username="$GITAUTH_USERNAME" \
            --set shell.gitAuth.keyserver.password="$GITAUTH_PASSWORD" \
            --set clusterDomain="${<<parameters.cluster_domain>>}" \
            $reference_data_override \
            --namespace="$NAMESPACE" \
            --values '<<parameters.silta_config>>' \
            --timeout <<parameters.deployment_timeout>> &> helm-output.log &
          pid=$!

          echo -n "Waiting for containers to start"

          TIME_WAITING=0
          LOGS_SHOWN=false
          while true; do
            if [ $LOGS_SHOWN == false ] && kubectl get pod -l job-name="$RELEASE_NAME-post-release" -n "$NAMESPACE" --ignore-not-found | grep  -qE "Running|Completed" ; then
              echo ""
              echo "Deployment log:"
              kubectl logs "job/$RELEASE_NAME-post-release" -n "$NAMESPACE" -f --timestamps=true || true
              LOGS_SHOWN=true
            fi

            # Helm command is complete.
            if ! ps -p "$pid" > /dev/null; then
              if grep -q BackoffLimitExceeded helm-output.log ; then
                # Don't show BackoffLimitExceeded, it confuses everyone.
                show_failing_pods
                echo "The post-release job failed, see log output above."
              else
                echo "Helm output:"
                cat helm-output.log
              fi
              wait $pid
              break
            fi

            if [ $TIME_WAITING -gt 300 ]; then
              echo "Timeout waiting for resources."
              show_failing_pods
              exit 1
            fi

            echo -n "."
            sleep 5
            TIME_WAITING=$((TIME_WAITING+5))
          done

    - run:
        name: Wait for resources to be ready
        command: |
          # Get all deployments and statefulsets in the release and check the status of each one.
          statefulsets=$(kubectl get statefulset -n "$NAMESPACE" -l "release=${RELEASE_NAME}" -o name)
          if [ ! -z "$statefulsets" ]; then
            echo "$statefulsets" | xargs -n 1 kubectl rollout status -n "$NAMESPACE"
          fi
          kubectl get deployment -n "$NAMESPACE" -l "release=${RELEASE_NAME}" -o name | xargs -n 1 kubectl rollout status -n "$NAMESPACE"

    - helm-release-information
