phpcs:
  description: "phpcs validation command."
  steps:
    - run:
        name: phpcs validation
        command: |
          if [ -f phpcs.xml ] && [ -f vendor/bin/phpcs ]; then
            vendor/bin/phpcs --standard=phpcs.xml -s --colors
          fi

grumphp:
  description: "grumphp validation command."
  steps:
    - run:
        name: grumphp validation
        command: |
          if [ -f grumphp.yml ] && [ -f vendor/bin/grumphp ]; then
            vendor/bin/grumphp run
          fi

drupal-composer-install:
  description: "PHP composer install command."
  parameters:
    install-dev-dependencies:
      description: "Install development packages."
      type: boolean
      default: false
    cache-version:
      description: "CircleCI cache key prefix."
      type: string
      default: "v2"
  steps:
    - when:
        # Install dev dependencies.
        condition: <<parameters.install-dev-dependencies>>
        steps:
          # Restore from cache entries with or without dev dependencies.
          - restore_cache:
              keys:
                - <<parameters.cache-version>>-dependencies-{{ checksum "composer.lock" }}-<<parameters.install-dev-dependencies>>
                - <<parameters.cache-version>>-dependencies-{{ checksum "composer.lock" }}
          - run:
              name: composer install
              command: |
                composer install -n --prefer-dist --ignore-platform-reqs --optimize-autoloader

    - unless:
        # Don't install dev dependencies.
        condition: <<parameters.install-dev-dependencies>>
        steps:
          # Only restore from cache entries without dev dependencies.
          - restore_cache:
              keys:
                - <<parameters.cache-version>>-dependencies-{{ checksum "composer.lock" }}-<<parameters.install-dev-dependencies>>
          - run:
              name: composer install
              command: |
                composer install -n --prefer-dist --ignore-platform-reqs --no-dev --optimize-autoloader

    - save_cache:
        paths:
          - ./vendor
          - ./web/core
          - ./web/modules/contrib
          - ./web/themes/contrib
          - ./web/profiles/contrib
          - ./web/libraries
          - ./web/_ping.php
        key: <<parameters.cache-version>>-dependencies-{{ checksum "composer.lock" }}-<<parameters.install-dev-dependencies>>

drupal-docker-build:
  description: "Build docker images for drupal chart."
  parameters:
    nginx_build_context:
      type: string
      default: "web"
      description: "Path to be used as build context for Nginx image."
    background:
      type: boolean
      default: true
      description: "Run docker build in background."
    wait:
      type: boolean
      default: true
      description: "Wait for docker build to finish."
  steps:
    - build-docker-image:
        dockerfile: silta/nginx.Dockerfile
        path: <<parameters.nginx_build_context>>
        identifier: nginx
        docker-hash-prefix: v1
        background: <<parameters.background>>

    - build-docker-image:
        dockerfile: silta/php.Dockerfile
        path: "."
        identifier: php
        docker-hash-prefix: v4
        background: <<parameters.background>>

    - build-docker-image:
        dockerfile: silta/shell.Dockerfile
        path: "."
        identifier: shell
        docker-hash-prefix: v4
        background: <<parameters.background>>

    - run:
        name: Wait for docker images to be built
        command: |
          if [ << parameters.wait >> = true ]; then
            while true; do
              if [ $(ps -ef | grep -v grep | grep "silta ci image build" | wc -l) -lt 1 ]; then
                break
              fi
              sleep 1
            done
          fi

drupal-helm-deploy:
  description: "Deploy helm release."
  parameters:
    chart_name:
      description: "Helm chart name."
      type: string
    chart_repository:
      description: "Helm chart repository."
      type: string
    chart_version:
      description: "Deploy specific drupal helm chart version."
      type: string
      default: ""
    silta_config:
      description: "Chart values override file. Can have multiple, comma separated values."
      type: string
    cluster_domain:
      description: "Cluster domain value for helm chart. Will be used for default ingress hostnames."
      type: env_var_name
      default: CLUSTER_DOMAIN
    deployment_timeout:
      type: string
      default: "15m"
  steps:
    - helm-cleanup
    - run:
        name: Special updates
        command: |
          function version_lt() { test "$(printf '%s\n' "$@" | sort -rV | head -n 1)" != "$1"; }

          if [[ -n "$CURRENT_CHART_VERSION" ]] && [[ "$CURRENT_CHART_VERSION" = drupal-* ]]
          then
            if version_lt "$CURRENT_CHART_VERSION" "drupal-0.3.43"
            then
              echo "Recreating statefulset for Mariadb subchart update to 7.x."
              kubectl delete statefulset --cascade=false "$RELEASE_NAME-mariadb" -n "$NAMESPACE"
            fi
          fi

    - run:
        name: Deploy helm release
        no_output_timeout: '<<parameters.deployment_timeout>>'
        command: |
          NAMESPACE="${CIRCLE_PROJECT_REPONAME,,}"
          BRANCHNAME="${CIRCLE_BRANCH}"
          REPOSITORY_URL="${CIRCLE_REPOSITORY_URL}"

          PHP_IMAGE_URL=${php_IMAGE_URL}
          NGINX_IMAGE_URL=${nginx_IMAGE_URL}
          SHELL_IMAGE_URL=${shell_IMAGE_URL}

          silta ci release deploy \
            --release-name "${RELEASE_NAME}" \
            --chart-name "<<parameters.chart_name>>" \
            --chart-version "<<parameters.chart_version>>" \
            --chart-repository "<<parameters.chart_repository>>" \
            --branchname "${BRANCHNAME}" \
            --silta-environment-name "${SILTA_ENVIRONMENT_NAME}" \
            --nginx-image-url "${NGINX_IMAGE_URL}" \
            --php-image-url "${PHP_IMAGE_URL}" \
            --shell-image-url "${SHELL_IMAGE_URL}" \
            --repository-url "${REPOSITORY_URL}" \
            --gitauth-username "${GITAUTH_USERNAME}" \
            --gitauth-password "${GITAUTH_PASSWORD}" \
            --cluster-domain "${<<parameters.cluster_domain>>}" \
            --vpn-ip "${VPN_IP}" \
            --vpc-native "${VPC_NATIVE}" \
            --cluster-type "${CLUSTER_TYPE}" \
            --db-root-pass "${DB_ROOT_PASS}" \
            --db-user-pass "${DB_USER_PASS}" \
            --namespace "${NAMESPACE}" \
            --silta-config "<<parameters.silta_config>>" \
            --deployment-timeout "<<parameters.deployment_timeout>>"

    - run:
        name: Wait for resources to be ready
        command: |
          # Get all deployments and statefulsets in the release and check the status of each one.
          statefulsets=$(kubectl get statefulset -n "$NAMESPACE" -l "release=${RELEASE_NAME}" -o name)
          if [ ! -z "$statefulsets" ]; then
            echo "$statefulsets" | xargs -n 1 kubectl rollout status -n "$NAMESPACE"
          fi
          kubectl get deployment -n "$NAMESPACE" -l "release=${RELEASE_NAME}" -o name | xargs -n 1 kubectl rollout status -n "$NAMESPACE"

    - helm-release-information

drupal-values-validate:
  description: "Validate helm release."
  parameters:
    chart_name:
      description: "Helm chart name."
      type: string
    chart_repository:
      description: "Helm chart repository."
      type: string
    chart_version:
      description: "Validate specific drupal helm chart version."
      type: string
      default: ""
    silta_config:
      description: "Chart values override file. Can have multiple, comma separated values."
      type: string
  steps:
    - run:
        name: Validate values file
        command: |
          if [[ ! -z "<<parameters.chart_version>>" ]] ; then
            version="--chart-version <<parameters.chart_version>>"
          fi
          if [[ ! -z "<<parameters.chart_repository>>" ]] ; then
            repo="--chart-repository <<parameters.chart_repository>>"
          fi

          silta ci release validate --chart-name '<<parameters.chart_name>>' \
          $repo \
          $version \
          --namespace "$NAMESPACE" \
          --release-name "$RELEASE_NAME" \
          --silta-config '<<parameters.silta_config>>' \
          --silta-environment-name "$SILTA_ENVIRONMENT_NAME" \
          --vpn-ip "${VPN_IP}" \
          --vpc-native "${VPC_NATIVE}" \
          --cluster-type "${CLUSTER_TYPE}"

drupal-download-dev-chart:
  steps:
    - run:
        name: Download charts from github repository
        command: |
          rm -rf ./charts
          git clone --branch develop git@github.com:wunderio/charts.git
    - run:
        name: Add helm repositories and build local chart
        command: |
          helm repo add elastic https://helm.elastic.co
          helm repo add codecentric https://codecentric.github.io/helm-charts
          helm repo add percona https://percona.github.io/percona-helm-charts/
          helm dependency build ./charts/drupal

drupal-build: &drupal-build
  description: "Build drupal site and container images for deployment."
  parameters: &drupal-build-params
    drupal-root:
      description: "Relative path to drupal root"
      type: string
      default: "."
    codebase-build:
      description: "Preparational build steps run after code checkout."
      type: steps
      default: []
    # pre-release:
    #   description: "Steps to be executed before the Helm release is created."
    #   type: steps
    #   default: []
    # chart_name:
    #   description: "Helm chart name."
    #   type: string
    #   default: drupal
    # chart_version:
    #   description: "Deploy specific drupal helm chart version."
    #   type: string
    #   default: "^1.x"
    # chart_repository:
    #   description: "Helm chart repository."
    #   type: string
    #   default: https://storage.googleapis.com/charts.wdr.io
    # use_dev_chart:
    #   description: "Internal use only. Used by drupal-build-deploy-dev-charts."
    #   type: boolean
    #   default: false
    decrypt_files:
      description: "Encrypted value files. Can have multiple, comma separated values."
      type: string
      default: ""
    # silta_config:
    #   description: "Chart values override file. Can have multiple, comma separated values."
    #   type: string
    #   default: "silta/silta.yml"
    # skip-deployment:
    #   description: "Skip release deployment."
    #   type: boolean
    #   default: false
    # cluster_domain:
    #   description: "Cluster domain value for helm chart. Will be used for default ingress hostnames."
    #   type: env_var_name
    #   default: CLUSTER_DOMAIN
    # release-suffix:
    #   description: "Release name suffix."
    #   type: string
    #   default: ''
    # deployment_timeout:
    #   description: "Helm release deployment timeout."
    #   type: string
    #   default: "15m"
    nginx_build_context:
      description: "Path to be used as build context for Nginx image build."
      type: string
      default: "web"
    image_build_background:
      type: boolean
      default: true
      description: "Run docker build in background."
    image_build_wait:
      type: boolean
      default: true
      description: "Wait for docker build to finish."
    # source_chart:
    #   description: "Chart to extend"
    #   type: string
    #   default: ''
    # extension_file:
    #   description: "Extension config for the source chart"
    #   type: string
    #   default: ''
  steps:
    - steps: <<parameters.codebase-build>>
    # - unless:
    #     condition: <<parameters.skip-deployment>>
    #     steps:
    # - when:
    #       condition: <<parameters.use_dev_chart>>
    #       steps:
    #         - drupal-download-dev-chart
    - when:
        condition: <<parameters.decrypt_files>>
        steps:
          - decrypt-files:
              files: <<parameters.decrypt_files>>
    # - silta-setup:
    #     release-suffix: '<<parameters.release-suffix>>'
    # - extend-helm-chart:
    #     source_chart: '<<parameters.source_chart>>'
    #     extension_file: '<<parameters.extension_file>>'
    #     chart_version: '<<parameters.chart_version>>'
    # - drupal-values-validate:
    #     chart_name: <<parameters.chart_name>>
    #     chart_version: <<parameters.chart_version>>
    #     chart_repository: <<parameters.chart_repository>>
    #     silta_config: <<parameters.silta_config>>
    - drupal-docker-build:
        nginx_build_context: <<parameters.nginx_build_context>>
        background: <<parameters.image_build_background>>
        wait: <<parameters.image_build_wait>>
    # - steps: <<parameters.pre-release>>
    # - drupal-helm-deploy:
    #     chart_name: <<parameters.chart_name>>
    #     chart_version: <<parameters.chart_version>>
    #     chart_repository: <<parameters.chart_repository>>
    #     silta_config: <<parameters.silta_config>>
    #     cluster_domain: <<parameters.cluster_domain>>
    #     deployment_timeout: <<parameters.deployment_timeout>>

drupal-deploy: &drupal-deploy
  description: "Deploy drupal site to kubernetes cluster."
  parameters: &drupal-deploy-params
    # drupal-root:
    #   description: "Relative path to drupal root"
    #   type: string
    #   default: "."
    # codebase-build:
    #   description: "Preparational build steps run after code checkout."
    #   type: steps
    #   default: []
    pre-release:
      description: "Steps to be executed before the Helm release is created."
      type: steps
      default: []
    chart_name:
      description: "Helm chart name."
      type: string
      default: drupal
    chart_version:
      description: "Deploy specific drupal helm chart version."
      type: string
      default: "^1.x"
    chart_repository:
      description: "Helm chart repository."
      type: string
      default: https://storage.googleapis.com/charts.wdr.io
    use_dev_chart:
      description: "Internal use only. Used by drupal-build-deploy-dev-charts."
      type: boolean
      default: false
    # decrypt_files:
    #   description: "Encrypted value files. Can have multiple, comma separated values."
    #   type: string
    #   default: ""
    silta_config:
      description: "Chart values override file. Can have multiple, comma separated values."
      type: string
      default: "silta/silta.yml"
    # skip-deployment:
    #   description: "Skip release deployment."
    #   type: boolean
    #   default: false
    cluster_domain:
      description: "Cluster domain value for helm chart. Will be used for default ingress hostnames."
      type: env_var_name
      default: CLUSTER_DOMAIN
    # release-suffix:
    #   description: "Release name suffix."
    #   type: string
    #   default: ''
    deployment_timeout:
      description: "Helm release deployment timeout."
      type: string
      default: "15m"
    # nginx_build_context:
    #   description: "Path to be used as build context for Nginx image build."
    #   type: string
    #   default: "web"
    # image_build_background:
    #   type: boolean
    #   default: true
    #   description: "Run docker build in background."
    # image_build_wait:
    #   type: boolean
    #   default: true
    #   description: "Wait for docker build to finish."
    source_chart:
      description: "Chart to extend"
      type: string
      default: ''
    extension_file:
      description: "Extension config for the source chart"
      type: string
      default: ''
  steps:
    # - unless:
    #     condition: <<parameters.skip-deployment>>
    #     steps:
    # - when:
    #       condition: <<parameters.use_dev_chart>>
    #       steps:
    #         - drupal-download-dev-chart
    # - when:
    #     condition: <<parameters.decrypt_files>>
    #     steps:
    #       - decrypt-files:
    #           files: <<parameters.decrypt_files>>
    # - silta-setup:
    #     release-suffix: '<<parameters.release-suffix>>'
    - extend-helm-chart:
        source_chart: '<<parameters.source_chart>>'
        extension_file: '<<parameters.extension_file>>'
        chart_version: '<<parameters.chart_version>>'
    - drupal-values-validate:
        chart_name: <<parameters.chart_name>>
        chart_version: <<parameters.chart_version>>
        chart_repository: <<parameters.chart_repository>>
        silta_config: <<parameters.silta_config>>
    # - drupal-docker-build:
    #     nginx_build_context: <<parameters.nginx_build_context>>
    #     background: <<parameters.image_build_background>>
    #     wait: <<parameters.image_build_wait>>
    - steps: <<parameters.pre-release>>
    - drupal-helm-deploy:
        chart_name: <<parameters.chart_name>>
        chart_version: <<parameters.chart_version>>
        chart_repository: <<parameters.chart_repository>>
        silta_config: <<parameters.silta_config>>
        cluster_domain: <<parameters.cluster_domain>>
        deployment_timeout: <<parameters.deployment_timeout>>
