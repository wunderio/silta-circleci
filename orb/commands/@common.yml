build-docker-image:
  description: "Build docker image."
  parameters:
    dockerfile:
      description: "Dockerfile path."
      type: string
    path:
      description: "The path to be used as the context when building the docker image. An empty directory is used by default."
      type: string
      default: ''
    identifier:
      description: "Image identifier."
      type: string
    docker-hash-prefix:
      description: "Image tag prefix. Allows overriding cached images. (DEPRECATED)"
      type: string
      default: v1
    tag:
      description: "If provided, the given tag will be used for the docker image. By default a hash of the codebase (content of the path excluding files matched by .dockerignore) will be created."
      type: string
      default: ''
    expose_image:
      description: "Whether to export an environment variable with the image name. This can be used by helm charts (currently only the frontend chart) to add the image reference to the release values automatically."
      type: boolean
      default: true
    reuse_image:
      description: "Use existing image if identical image:tag exists in remote"
      type: boolean
      default: true
  steps:
    - run:
        name: Build <<parameters.identifier>> docker image
        command: |

          NAMESPACE="${CIRCLE_PROJECT_REPONAME,,}"
          BRANCHNAME="${CIRCLE_BRANCH,,}"

          IMAGE_URL=$(silta ci image url \
            --image-repo-host "${DOCKER_REPO_HOST}" \
            --image-repo-project "${DOCKER_REPO_PROJ}" \
            --namespace "${NAMESPACE}" \
            --image-identifier "<<parameters.identifier>>" \
            --build-path "<<parameters.path>>" \
            --dockerfile "<<parameters.dockerfile>>" \
            --image-tag "<<parameters.tag>>"
          )

          silta ci image build \
            --image-repo-host "${DOCKER_REPO_HOST}" \
            --image-repo-project "${DOCKER_REPO_PROJ}" \
            --namespace "${NAMESPACE}" \
            --image-identifier "<<parameters.identifier>>" \
            --build-path "<<parameters.path>>" \
            --dockerfile "<<parameters.dockerfile>>" \
            --image-tag "<<parameters.tag>>" \
            --branchname "${BRANCHNAME}" \
            --image-reuse <<parameters.reuse_image>>

          if [ '<<parameters.expose_image>>' = 'true' ]; then
            # Persist the image identifier and tag so it is available during deployment.
            echo "export <<parameters.identifier>>_IMAGE_IDENTIFIER='<<parameters.identifier>>'" >> "$BASH_ENV"
            echo "export <<parameters.identifier>>_IMAGE_URL='${IMAGE_URL}'" >> "$BASH_ENV"
          fi

silta-cli-setup:
  description: "Download Silta CI tooling."
  steps:
    - run:
        name: "Download CI tooling"
        command: |
          # CLI setup
          # Silta cli download
          mkdir -p ~/.local/bin

          # Latest tagged release
          latest_release_url=$(curl -s https://api.github.com/repos/wunderio/silta-cli/releases/latest | jq -r '.assets[] | .browser_download_url | select(endswith("linux-amd64.tar.gz"))')
          curl -sL $latest_release_url | tar xz -C ~/.local/bin

          # Selected release, i.e. 1.0.1
          # curl -sL https://github.com/wunderio/silta-cli/releases/download/0.1.0/silta-0.1.0-linux-amd64.tar.gz | tar xz -C ~/.local/bin

          # Latest build from master branch
          # curl -sL https://github.com/wunderio/silta-cli/releases/download/master/silta-master-linux-amd64.tar.gz | tar xz -C ~/.local/bin

          # Latest build from test release
          # curl -sL https://github.com/wunderio/silta-cli/releases/download/test/silta-test-linux-amd64.tar.gz | tar xz -C ~/.local/bin

          silta version

docker-login:
  description: "Login to the docker registry."
  steps:
    - run:
        name: Login to the docker registry
        command: |
          silta ci image login

silta-setup:
  description: "Set up silta cluster connection and set release name."
  parameters:
    release-suffix:
      description: "Release name suffix."
      type: string
      default: ''
  steps:
    - setup_remote_docker:
        # Note: default Docker version is 17.09.
        # Using BuildKit requires version 18.09 and dockerignore per dockerfile from 19.03
        # Alpine 3.14+ builds require 20.10.0+
        version: 20.10.7
    - set-up-socks-proxy
    - cloud-login
    - docker-login
    - set-release-name:
        release-suffix: '<<parameters.release-suffix>>'

set-release-name:
  description: "Set release name."
  parameters:
    release-suffix:
      description: "Release name suffix."
      type: string
      default: ''
  steps:
    - run:
        name: Set release name
        command: |
          
          NAMESPACE="${CIRCLE_PROJECT_REPONAME,,}"
          BRANCHNAME="${CIRCLE_BRANCH,,}"
          
          RELEASE_NAME=$(silta ci release name --branchname "${BRANCHNAME}" --release-suffix "<<parameters.release-suffix>>")
          SILTA_ENVIRONMENT_NAME=$(silta ci release environmentname --branchname "${BRANCHNAME}" --release-suffix "<<parameters.release-suffix>>")

          echo "export RELEASE_NAME='$RELEASE_NAME'" >> "$BASH_ENV"
          echo "export NAMESPACE='$NAMESPACE'" >> "$BASH_ENV"
          echo "export SILTA_ENVIRONMENT_NAME='$SILTA_ENVIRONMENT_NAME'" >> "$BASH_ENV"

          echo "The release name for this branch is \"$RELEASE_NAME\" in the \"$NAMESPACE\" namespace"

# This will be deprecated in favor of cloud-login job
gcloud-login:
  description: "Deprecated. Replace this with cloud-login job!"
  steps:
    - cloud-login

cloud-login:
  description: "Cloud login."
  steps:
    - run:
        name: Cloud login
        command: |
          silta cloud login --cluster-name "${CLUSTER_NAME}"

helm-cleanup:
  description: "Clean up failed Helm releases."
  steps:
    - run:
        name: Clean up failed Helm releases
        command: |
          silta ci release clean-failed \
            --release-name ${RELEASE_NAME} \
            --namespace "${NAMESPACE}"

helm-release-information:
  description: "Helm release information"
  steps:
    - run:
        name: Release information
        command: |
          silta ci release info \
            --release-name ${RELEASE_NAME} \
            --namespace "${NAMESPACE}" \
            --github-token "${GITHUB_TOKEN}" \
            --pr-number "${CIRCLE_PR_NUMBER}" \
            --pull-request "${CIRCLE_PULL_REQUEST}" \
            --project-organization "${CIRCLE_PROJECT_USERNAME}" \
            --project-reponame "${CIRCLE_PROJECT_REPONAME}"

decrypt-files:
  description: "Decrypt encrypted files."
  parameters:
    files:
      description: "Encrypted file location. Can have multiple, comma separated paths."
      type: string
    secret_key_env:
      description: "Environment variable holding symmetrical decryption key."
      type: env_var_name
      default: SECRET_KEY
  steps:
    - run:
        name: Decrypt secret files
        command: |
          silta secrets decrypt --file '<<parameters.files>>' --secret-key-env '<<parameters.secret_key_env>>'

set-up-socks-proxy:
  description: "Set up socks proxy for outgoing connections."
  steps:
    - run:
        name: Add SSH private-key
        command: |
          if [[ -n "$TUNNEL_PRIVATE_KEY" ]]; then
            echo -e "$TUNNEL_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
          fi    
    - run:
        name: Open up a tunnel
        command: |
          if [[ -n "$TUNNEL_USER_HOST" ]]; then
            ssh -o StrictHostKeyChecking=accept-new -D 1337 -C -N -q -f "$TUNNEL_USER_HOST"
            echo 'export HTTPS_PROXY=socks5://localhost:1337' >> $BASH_ENV
            gcloud config set proxy/type socks5
            gcloud config set proxy/address 127.0.0.1
            gcloud config set proxy/port 1337
            echo "Proxy is ready for outgoing connections"
          fi

