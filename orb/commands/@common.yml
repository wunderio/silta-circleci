build-docker-image:
  description: "Build docker image."
  parameters:
    dockerfile:
      description: "Dockerfile path."
      type: string
    path:
      description: "The path to be used as the context when building the docker image. An empty directory is used by default."
      type: string
      default: ''
    identifier:
      description: "Image identifier."
      type: string
    docker-hash-prefix:
      description: "Image tag prefix. Allows overriding cached images."
      type: string
      default: v1
    tag:
      description: "If provided, the given tag will be used for the docker image. By default a hash of the codebase (content of the path excluding files matched by .dockerignore) will be created."
      type: string
      default: ''
    expose_image:
      description: "Whether to export an environment variable with the image name. This can be used by helm charts (currently only the frontend chart) to add the image reference to the release values automatically."
      type: boolean
      default: true
    reuse_image:
      description: "Use existing image if identical image:tag exists in remote"
      type: boolean
      default: true
    background:
      description: "Run the image build process in the background."
      type: boolean
      default: false
  steps:
    - run:
        name: Create <<parameters.identifier>> docker image url
        command: |

          NAMESPACE="${CIRCLE_PROJECT_REPONAME,,}"
          BRANCHNAME="${CIRCLE_BRANCH}"

          IMAGE_URL=$(silta ci image url \
            --image-repo-host "${DOCKER_REPO_HOST}" \
            --image-repo-project "${DOCKER_REPO_PROJ}" \
            --namespace "${NAMESPACE}" \
            --image-identifier "<<parameters.identifier>>" \
            --build-path "<<parameters.path>>" \
            --dockerfile "<<parameters.dockerfile>>" \
            --image-tag "<<parameters.tag>>" \
            --image-tag-prefix "<<parameters.docker-hash-prefix>>" \
          )

          if [ '<<parameters.expose_image>>' = 'true' ]; then
            # Persist the image identifier and tag so it is available during deployment.
            echo "export <<parameters.identifier>>_IMAGE_IDENTIFIER='<<parameters.identifier>>'" >> "$BASH_ENV"
            echo "export <<parameters.identifier>>_IMAGE_URL='${IMAGE_URL}'" >> "$BASH_ENV"
          fi

    - run:
        name: Build <<parameters.identifier>> docker image
        background: <<parameters.background>>
        command: |

          NAMESPACE="${CIRCLE_PROJECT_REPONAME,,}"
          BRANCHNAME="${CIRCLE_BRANCH}"

          # Create temporary file for storing build process exit code with "build_process" prefix.
          exit_code_file=$(mktemp /tmp/build-docker-image.XXXXXX)          
          touch $exit_code_file

          # Trap and store exit code of the build process.
          trap 'echo $? > $exit_code_file' EXIT

          # Build the docker image.
          silta ci image build \
            --image-repo-host "${DOCKER_REPO_HOST}" \
            --image-repo-project "${DOCKER_REPO_PROJ}" \
            --namespace "${NAMESPACE}" \
            --image-identifier "<<parameters.identifier>>" \
            --build-path "<<parameters.path>>" \
            --dockerfile "<<parameters.dockerfile>>" \
            --image-tag-prefix "<<parameters.docker-hash-prefix>>" \
            --image-tag "<<parameters.tag>>" \
            --branchname "${BRANCHNAME}" \
            --image-reuse <<parameters.reuse_image>>

silta-cli-setup:
  description: "Download Silta CI tooling."
  parameters:
    version:
      description: "Version of silta-cli to use."
      type: enum
      enum: ["latest", "test"]
      default: "latest"
  steps:
    - run:
        name: "Download CI tooling"
        command: |
          # CLI setup
          # Silta cli download
          mkdir -p ~/.local/bin

          # Latest tagged release
          if [ '<<parameters.version>>' = 'latest' ]; then
            latest_release_url=$(curl -s https://api.github.com/repos/wunderio/silta-cli/releases/latest | jq -r '.assets[] | .browser_download_url | select(endswith("linux-amd64.tar.gz"))')
            curl -sL $latest_release_url | tar xz -C ~/.local/bin
          else
            # Selected release. Currently only "test" is supported, in addition to "latest". 
            selected_release_url="https://github.com/wunderio/silta-cli/releases/download/<<parameters.version>>/silta-<<parameters.version>>-linux-amd64.tar.gz"
            curl -sL $selected_release_url | tar xz -C ~/.local/bin
          fi

          silta version

docker-login:
  description: "Login to the docker registry."
  steps:
    - run:
        name: Login to the docker registry
        command: |
          silta ci image login

docker-setup:
  description: "Set up Docker."
  steps:
    - setup_remote_docker

environment-variable-override:
  description: "Override environment variables based on cluster id."
  steps:
    - run:
        name: Environment variable override
        command: |
          if [ ! -z "${SILTA_CLUSTER_ID}" ]; then
            # iterate variables starting with "${SILTA_CLUSTER_ID}_"
            for  var in $(compgen -A variable | grep "^${SILTA_CLUSTER_ID}_"); do
              # if value is not empty and target value differs from the source value, set it as environment variable
              if [ ! -z "${!var}" ] && [ "${!var}" != "${var/${SILTA_CLUSTER_ID}_/}" ]; then
                export ${var/${SILTA_CLUSTER_ID}_/}="${!var}"
                echo "export ${var/${SILTA_CLUSTER_ID}_/}='${!var}'" >> "$BASH_ENV"
              fi
            done
          fi

silta-setup:
  description: "Set up silta cluster connection and set release name."
  parameters:
    release-suffix:
      description: "Release name suffix."
      type: string
      default: ''
    custom-proxy-command:
      description: "Custom command to run instead of the default proxy setup."
      type: string
      default: ''
  steps:
    - environment-variable-override
    - set-up-socks-proxy:
        custom-proxy-command: '<<parameters.custom-proxy-command>>'
    - cloud-login
    - docker-login
    - set-release-name:
        release-suffix: '<<parameters.release-suffix>>'

set-release-name:
  description: "Set release name."
  parameters:
    release-suffix:
      description: "Release name suffix."
      type: string
      default: ''
  steps:
    - run:
        name: Set release name
        command: |
          
          NAMESPACE="${CIRCLE_PROJECT_REPONAME,,}"
          # Use branch name or fall back to "production" if it's a tag.
          BRANCHNAME="${CIRCLE_BRANCH:-${CIRCLE_TAG:+production}}"
          
          RELEASE_NAME=$(silta ci release name --branchname "${BRANCHNAME}" --release-suffix "<<parameters.release-suffix>>")
          SILTA_ENVIRONMENT_NAME=$(silta ci release environmentname --branchname "${BRANCHNAME}" --release-suffix "<<parameters.release-suffix>>")

          echo "export RELEASE_NAME='$RELEASE_NAME'" >> "$BASH_ENV"
          echo "export NAMESPACE='$NAMESPACE'" >> "$BASH_ENV"
          echo "export SILTA_ENVIRONMENT_NAME='$SILTA_ENVIRONMENT_NAME'" >> "$BASH_ENV"

          echo "The release name for this branch is \"$RELEASE_NAME\" in the \"$NAMESPACE\" namespace"

# TODO: Remove this if You see it after 2023.06.01
gcloud-login:
  description: "Deprecated. Replace this with cloud-login job!"
  steps:
    - run:
        name: "Deprecated. Replace this with cloud-login job!"
        command: |
          echo "Deprecated. Replace this with cloud-login job!"
          exit 1

cloud-login:
  description: "Cloud login."
  steps:
    - run:
        name: Cloud login
        command: |
          
          KUBECTL_CONFIG_VAR="${SILTA_CLUSTER_ID}_KUBECTL_CONFIG"
            
          # If project kubectl is set, use it to connect to the cluster.
          if [ ! -z "${!KUBECTL_CONFIG_VAR}" ]; then
            export KUBECTL_CONFIG="${!KUBECTL_CONFIG_VAR}"
            echo "export KUBECTL_CONFIG=${!KUBECTL_CONFIG_VAR}" >> $BASH_ENV
            silta cloud login --cluster-name "${CLUSTER_NAME}"
        
          # Otherwise, try to use global credentials and check exit code.
          else
            set +e
            silta cloud login --cluster-name "${CLUSTER_NAME}"
            
            # if exit code is not 0, request kubectl injection via silta dashboard api
            if [ $? -ne 0 ]; then
              set -e
              echo "Cluster connection credentials are missing."

              if [ ! -z "${SILTA_DASHBOARD_URL}" ]; then
                echo "Attempting to request cluster connection credentials from the Silta Dashboard API."
                NAMESPACE="${CIRCLE_PROJECT_REPONAME,,}"
                # Request kubeconfig injection from the Silta Dashboard API via curl request.
                curl -X POST "${SILTA_DASHBOARD_URL}/api/circleci/reload-ns-rbac" \
                  -H "Content-type: application/x-www-form-urlencoded" \
                  -d "rbac_reload_key=${SILTA_DASHBOARD_KEY}" \
                  -d "cluster=${SILTA_CLUSTER_ID}" \
                  -d "namespace=${NAMESPACE}"
                echo ""
                echo "Credentials requested, please rerun the build."
              fi
              exit 1
            fi
          fi

helm-cleanup:
  description: "Clean up failed Helm releases."
  steps:
    - run:
        name: Clean up failed Helm releases
        command: |
          silta ci release clean-failed \
            --release-name ${RELEASE_NAME} \
            --namespace "${NAMESPACE}"

helm-release-information:
  description: "Helm release information"
  steps:
    - run:
        name: Release information
        command: |
          silta ci release info \
            --release-name ${RELEASE_NAME} \
            --namespace "${NAMESPACE}" \
            --github-token "${GITHUB_TOKEN}" \
            --pr-number "${CIRCLE_PR_NUMBER}" \
            --pull-request "${CIRCLE_PULL_REQUEST}" \
            --project-organization "${CIRCLE_PROJECT_USERNAME}" \
            --project-reponame "${CIRCLE_PROJECT_REPONAME}"

decrypt-files:
  description: "Decrypt encrypted files."
  parameters:
    files:
      description: "Encrypted file location. Can have multiple, comma separated paths."
      type: string
    secret_key_env:
      description: "Environment variable holding symmetrical decryption key."
      type: env_var_name
      default: SECRET_KEY
  steps:
    - run:
        name: Decrypt secret files
        command: |
          silta secrets decrypt --file '<<parameters.files>>' --secret-key-env '<<parameters.secret_key_env>>'

set-up-socks-proxy:
  description: "Set up socks proxy for outgoing connections."
  parameters:
    custom-proxy-command:
      description: "Custom command to run instead of the default proxy setup."
      type: string
      default: ''
  steps:
    - run:
        name: Add SSH private-key
        command: |
          if [[ -n "$TUNNEL_PRIVATE_KEY" ]]; then
            echo -e "$TUNNEL_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
          fi
    - when:
        condition: <<parameters.custom-proxy-command>>
        steps:
          - run:
              name: Proxy setup for cluster connections
              command: |
                <<parameters.custom-proxy-command>>
    - unless:
        condition: <<parameters.custom-proxy-command>>
        steps:
          - run:
              name: Proxy setup for cluster connections
              command: |
                if [[ -n "$TUNNEL_USER_HOST" ]]; then
                  ssh -o StrictHostKeyChecking=accept-new -D 1337 -C -N -q -f "$TUNNEL_USER_HOST"
                  echo 'export SILTA_PROXY=socks5://localhost:1337' >> $BASH_ENV
                  if command -v gcloud &> /dev/null; then
                    gcloud config set proxy/type socks5
                    gcloud config set proxy/address 127.0.0.1
                    gcloud config set proxy/port 1337
                  fi
                  if command -v silta &> /dev/null; then
                    if [ "$CLUSTER_TYPE" == "aws" ] && command -v pproxy &> /dev/null; then
                      pproxy -r socks5://127.0.0.1:1337 --daemon
                      silta config set proxy http://localhost:8080
                    else
                      silta config set proxy socks5://localhost:1337
                    fi
                  fi
                  echo "Proxy is ready for outgoing connections"
                fi

extend-helm-chart:
  description: "Add additional Helm charts"
  parameters:
    source_chart:
      description: "Helm chart to extend."
      type: string
    chart_version:
      description: "Validate specific drupal helm chart version."
      type: string
      default: ''
    extension_file:
      description: "Custom chart file"
      type: string
      default: ''
  steps:
    - run:
        name: Extend Helm chart
        command: |
            if [[ ! -z "<<parameters.extension_file>>" ]] ; then
              silta chart extend --chart-name <<parameters.source_chart>> --chart-version "<<parameters.chart_version>>" --subchart-list-file <<parameters.extension_file>>
            fi
