frontend-build-deploy:
  description: "Build and deploy frontend chart release."
  executor: <<parameters.executor>>
  parameters:
    executor:
      description: "The name of custom executor to use."
      type: executor
      default: silta
    codebase-build:
      description: "Preparational build steps run after code checkout."
      type: steps
      default: []
    chart_name:
      description: "Helm chart name."
      type: string
      default: frontend
    chart_repository:
      description: "Helm chart repository."
      type: string
      default: https://storage.googleapis.com/charts.wdr.io
    silta_config:
      description: "Chart values override file. Can have multiple, comma separated values."
      type: string
      default: "silta/silta.yml"
    skip-deployment:
      description: "Skip release deployment."
      type: boolean
      default: false
    cluster_domain:
      description: "Cluster domain value for helm chart. Will be used for default ingress hostnames."
      type: env_var_name
      default: CLUSTER_DOMAIN
    image_build_steps:
      description: "Image build steps."
      type: steps
      default:
      - build-docker-image:
          dockerfile: 'silta/node.Dockerfile'
          path: '.'
          identifier: 'node'
          docker-hash-prefix: v6
    release-suffix:
      description: "Release name suffix."
      type: string
      default: ''
  steps:
    - checkout
    - silta-cli-setup

    - steps: <<parameters.codebase-build>>

    - silta-setup:
        release-suffix: '<<parameters.release-suffix>>'

    - steps: <<parameters.image_build_steps>>

    - unless:
        condition: <<parameters.skip-deployment>>
        steps:

          - helm-cleanup

          - run:
              name: Deploy helm release
              command: |
                image_overrides=""
                for var in `env | grep _IMAGE_IDENTIFIER`; do
                  identifier=`echo $var | cut -f 2 -d "="`
                  image_url="${identifier}_IMAGE_URL"
                  image_overrides="$image_overrides --set services.${identifier}.image=${image_url}"
                done

                # Override Database credentials if specified
                if [[ ! -z "$DB_ROOT_PASS" ]] ; then
                  db_root_pass_override="--set mariadb.rootUser.password=$DB_ROOT_PASS"
                fi
                if [[ ! -z "$DB_USER_PASS" ]] ; then
                  db_user_pass_override="--set mariadb.db.password=$DB_USER_PASS"
                fi
                
                # Add internal VPN if defined in environment
                extra_noauthips=""
                if [[ ! -z "$VPN_IP" ]] ; then
                  extra_noauthips="--set nginx.noauthips.vpn=${VPN_IP}/32"
                fi

                # Pass VPC native setting if defined in environment
                extra_vpcnative=""
                if [[ ! -z "$VPC_NATIVE" ]] ; then
                  extra_vpcnative="--set cluster.vpcNative=${VPC_NATIVE}"
                fi

                # Add cluster type if defined in environment
                extra_clustertype=""
                if [[ ! -z "$CLUSTER_TYPE" ]] ; then
                  extra_clustertype="--set cluster.type=${CLUSTER_TYPE}"
                fi

                helm upgrade --install "$RELEASE_NAME" '<<parameters.chart_name>>' \
                  --repo '<<parameters.chart_repository>>' \
                  --cleanup-on-fail \
                  --set environmentName="$SILTA_ENVIRONMENT_NAME" \
                  --set silta-release.branchName="$CIRCLE_BRANCH" \
                  $extra_noauthips \
                  $extra_vpcnative \
                  $extra_clustertype \
                  $image_overrides \
                  $db_root_pass_override \
                  $db_user_pass_override \
                  --set shell.gitAuth.repositoryUrl="$CIRCLE_REPOSITORY_URL" \
                  --set shell.gitAuth.apiToken="$GITAUTH_API_TOKEN" \
                  --set shell.gitAuth.keyserver.username="$GITAUTH_USERNAME" \
                  --set shell.gitAuth.keyserver.password="$GITAUTH_PASSWORD" \
                  --set clusterDomain=${<<parameters.cluster_domain>>} \
                  --namespace="$NAMESPACE" \
                  --values '<<parameters.silta_config>>'
          - run:
              name: Wait for resources to be ready
              command: |
                # Get all deployments in the release and check the status of each one.
                kubectl get deployment -n "$NAMESPACE" -l "release=${RELEASE_NAME}" -o name | xargs -n 1 kubectl rollout status -n "$NAMESPACE"

          - helm-release-information
